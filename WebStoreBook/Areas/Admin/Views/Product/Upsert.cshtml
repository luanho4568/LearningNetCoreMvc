@model WebStoreBook.Models.ViewModel.ProductVM

<form method="post" asp-action="Upsert" enctype="multipart/form-data">
    <div class="border border-black p-3 mt-4">
        <div class="row pb-2">
            <h2>@(Model.product.Id == 0 ? "Create" : "Edit") Product</h2>
            <hr />
        </div>
        <div class="mb-3 ">
            <label asp-for="product.Title">Title</label>
            <input asp-for="product.Title" class="form-control" />
            <span asp-validation-for="product.Title" class="text-danger"></span>
        </div>
        <div class="mb-3 ">
            <label asp-for="product.Description">Description</label>
            <textarea asp-for="product.Description" class="form-control" rows="3"></textarea>
            <span asp-validation-for="product.Description" class="text-danger"></span>
        </div>
        <div class="mb-3 ">
            <label asp-for="product.ISBN">ISBN</label>
            <input asp-for="product.ISBN" class="form-control" />
            <span asp-validation-for="product.ISBN" class="text-danger"></span>
        </div>
        <div class="mb-3 ">
            <label asp-for="product.Author">Author</label>
            <input asp-for="product.Author" class="form-control" />
            <span asp-validation-for="product.Author" class="text-danger"></span>
        </div>
        <div class="mb-3 ">
            <label asp-for="product.ListPrice">ListPrice</label>
            <input asp-for="product.ListPrice" class="form-control" rows="3" />
            <span asp-validation-for="product.ListPrice" class="text-danger"></span>
        </div>
        <div class="mb-3 ">
            <label asp-for="product.Price50">Price50</label>
            <input asp-for="product.Price50" class="form-control" />
            <span asp-validation-for="product.Price50" class="text-danger"></span>
        </div>
        <div class="mb-3 ">
            <label asp-for="product.Price100">Price100</label>
            <input asp-for="product.Price100" class="form-control" />
            <span asp-validation-for="product.Price100" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for="product.ImageUrl"></label>
            <input type="file" id="imageUrl" name="file" class="form-control" />
            <span asp-validation-for="product.ImageUrl" class="text-danger"></span>
        </div>

        <div class="mb-3 ">
            <label asp-for="product.CategoryId">Category</label>
            <select asp-items="Model.CategoryList" asp-for="product.CategoryId" class="form-select">
                <option disabled>-- Select Category --</option>
            </select>
            <span asp-validation-for="product.CategoryId" class="text-danger"></span>
        </div>
        <div class="mb-3 ">
            <label asp-for="product.CoverTypeId"></label>
            <select asp-items="Model.CoverTypeList" asp-for="product.CoverTypeId" class="form-select">
                <option disabled>-- Select Cover Type --</option>
            </select>
            <span asp-validation-for="product.CoverTypeId" class="text-danger"></span>
        </div>
        @if (Model.product.Id == 0)
        {
            <button type="submit" onclick="return ValidateInput()" class="btn btn-warning">Create</button>
        }
        else
        {
            <button type="submit" class="btn btn-warning">Update</button>
        }
        <a asp-controller="Product" asp-action="Index" class="btn btn-danger">Back to list</a>
    </div>
</form>


@section Scripts
{
    <partial Title="_ValidationScriptsPartial" />
    <script>
        function ValidateInput() {
            var fileInput = document.querySelector("#imageUrl");
            if (fileInput.files.length === 0) {
                Swal.fire({
                    icon: "error",
                    title: "Lỗi",
                    text: "Vui lòng nhập hình ảnh!",
                });
                return false;
            }
            return true;
        }
    </script>
    <script>
        tinymce.init({
          selector: 'textarea',
          plugins: [
            // Core editing features
            'anchor', 'autolink', 'charmap', 'codesample', 'emoticons', 'image', 'link', 'lists', 'media', 'searchreplace', 'table', 'visualblocks', 'wordcount',
            // Your account includes a free trial of TinyMCE premium features
            // Try the most popular premium features until Sep 22, 2024:
            'checklist', 'mediaembed', 'casechange', 'export', 'formatpainter', 'pageembed', 'a11ychecker', 'tinymcespellchecker', 'permanentpen', 'powerpaste', 'advtable', 'advcode', 'editimage', 'advtemplate', 'ai', 'mentions', 'tinycomments', 'tableofcontents', 'footnotes', 'mergetags', 'autocorrect', 'typography', 'inlinecss', 'markdown',
          ],
          toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
          tinycomments_mode: 'embedded',
          tinycomments_author: 'Author name',
          mergetags_list: [
            { value: 'First.Name', title: 'First Name' },
            { value: 'Email', title: 'Email' },
          ],
          ai_request: (request, respondWith) => respondWith.string(() => Promise.reject('See docs to implement AI Assistant')),
        });
    </script>
}
